title = "Hindley-Milner type inference"
date  = 2024-05-26
draft = true
includes = "hindley_milner.js" "style.css"

This is a practical and hands-on approach to getting familiar with Hindley-Milner type inference.
The Hindley-Milner (HM) system is capable of inferring the most general type of an expression, 
and is used by both Rust and Haskell.
To get familiar with how this is done, there is an interactive prompt on this page where you can enter an expression.
Information is then shown displaying intermediate steps of inferring the type.
The core of my code is based on code provided in #link(https://eli.thegreenplace.net/2018/type-inference/)[this post].
There are other (more efficient) ways of inferring the most general type than what is explained on this page.
The content on this page is more intended to get an initial understanding of the topic

#h(algorithm) Algorithm

The algorithm can be summarized in a few steps.

#ol
- Recursively assign each sub-expression in the given expression a unique type variable, like #code[t0] or #code[t1].
- Generate type equations like #code[t0 = Bool] and #code[t0 = t1].
  The equations are created based on knowledge of how builtin functions and language constructs are typed.
  For example, the condition of an if-expression has to be of type #code[Bool] so if the expression
  in the place of the condition was assigned type #code[t0] we know that #code[t0] should be of type
  #code[Bool], in other words #code[t0 = Bool].
- Use these equations to find #em[substitutions].
  These substitutions will look like #code[t1 = Int] or #code[t2 = t3], and mean that we can 
  substitute occurences of #code[t1] with #code[Int] and occurences of #code[t2] with #code[t3].
- The most specific general type of the expression is found by applying the substitutions.
  It is possible that the expression is ill-typed in some way, but that is also discovered in this 
  step and will be explained further on.

The last two steps together form a process called #em[unification] and is the real solving part of
the algorithm. The steps before it are just setup. And that is the basic idea of the algorithm in a nut shell.


#h(playground) Playground

Below is a text field where you can enter an expression for which we will infer the type.
There are also a few buttons for you to try out, that will enter an expression for you.
The "language" used on this page is not a real language, but something I came up with.
It cannot be executed and only supports a few operations and types, but it is complex enough to get a taste type inference with.
Its syntax is similar to Lisp or Haskell. 

The syntax for applying a function is Lispy, so to add two variables #code[a] and #code[b] you write #code[(+ a b)], or to run a function #code[f] with parameter #code[x] you write #code[(f x)].

The language also supports an if/else control flow structure, which is written as #code[if a then b else c].

The types that the language supports are #code[Int], #code[Bool] and functions.

Explanation of the text area input field here!!

Explanation of the small programming language here!!!

#html
<button id="button-1">Example 1</button>
<button id="button-2">Example 2</button>
<button id="button-3">Example 3</button>
<textarea id="code-input" cols="80" rows="10"></textarea>

#hh(assignment) 1. Assign type variables to expressions

First, each sub-expression is assigned a unique type variable. 
The type variables here are all of the form #code[ti] where #code[i] is an integer.
Below you can see all the sub-expressions of the given expression and to which variable they are assigned.

#html
<div id="outVars" class="out"></div>

#hh(equations) 2. Generate type equations

Next, equations are generated.
These equations are based on the rules of our type system and predefined functions in the language.
For example, in an if-expression both branches have to return a value of the same type.
Let's say that type #code[t1] was assigned to the then branch and type #code[t2] to the else branch.
Now we can add an equation #code[t1 = t2], since they need to be the same.

An if-expression also has a condition which must be of type #code[Bool], so if the type of the expression
for the condition is #code[t3] we can add equation #code[t3 = Bool].

For predefined functions like #code[=] (the 'is equal'-operator, that is written as #code[==] in most programming languages), 
we say that its arguments must be of the same type and that the return type is #code[Bool].
So, whenever this function is used we can similarly add equations.

Below are the type equations that were generated. 
Try to find out and understand why each equation was generated!

#html
<div id="outEquations" class="out"></div>

#hh(substitutions) 3. Find substitutions

Our algorith finds a number of substitutions, but some of them are already known to us and were generated in the previous step.

#html
<div id="outSubstitutions" class="out"></div>

#hh(simplify) 4. Simplify to general type

Finally, we can determine the most general type.

#html
<div id="outGeneralType" class="out"></div>

#html
<div id="outGeneralTypePretty" class="out"></div>
